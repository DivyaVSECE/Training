class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
    if(candidates == null || candidates.length == 0)
        return res;
    Arrays.sort(candidates);
    help(res, new ArrayList<Integer>(), target, 0, candidates);
    return res;
    }

     public void help(List<List<Integer>> res, ArrayList<Integer> tmp, int target, int start, int [] candidates)
    {
       if(target == 0)
       {
            res.add(new ArrayList<Integer> (tmp));
            return;
       }
       else
       {
            for(int i = start;i<candidates.length;i++)
            {
               if(i > start && candidates[i] == candidates[i-1])
                   continue;
               if(target >= candidates[i])
               {
                    tmp.add(new Integer(candidates[i]));
                    help(res, tmp, target - candidates[i],i,candidates);
                    tmp.remove(tmp.size()-1);
                }
            }
       }
    }
}
